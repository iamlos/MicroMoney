<?php
/**
 * Created by PhpStorm.
 * User: shellvon
 * Date: 16/6/14
 * Time: 上午11:05.
 */

namespace Model;

use MicroMan\MicroModel;
use Utility\Utility;

class UserNotifyModel extends MicroModel
{
    const TABLE_NAME = 'user_notify';

    /**
     * @return static
     */
    public static function getInstance()
    {
        return parent::createInstance(__CLASS__); // TODO: Change the autogenerated stub
    }

    public function getTableName()
    {
        return self::TABLE_NAME; // TODO: Change the autogenerated stub
    }

    /**
     * 创建一个通知给接受者用户.
     *
     * @param $notify_id
     * @param $receiver
     *
     * @return fasle|int
     */
    public function createNotify($notify_id, $receiver)
    {
        return $this->insert(
            array(
                'notify_id' => $notify_id,
                'receiver' => $receiver,
            )
        );
    }

    /**
     * 获取系统通知信息.
     *
     * @param int $user_id 用户ID,
     *
     * @return 系统信息.
     */
    public function getSysMessage($user_id)
    {
        $type = NotificationModel::NOTIFICATION_TYPE_SYS_MESSAGE;

        return $this->getNotification($type, $user_id);
    }

    /**
     * 获取用户提醒信息,比如其他用户操作了某条记录.
     *
     * @param int $user_id
     *
     * @return array|bool|int
     */
    public function getRemind($user_id)
    {
        $type = NotificationModel::NOTIFICATION_TYPE_REMIND;
        $notifications = $this->getNotification($type, $user_id);
        $data = array();
        $cache = array();
        foreach ($notifications as $row) {
            $row['friendly_date'] = Utility::friendlyTimeAgo($row['create_time']);
            $sender = $row['sender'];
            // 查询用户信息.
            if (isset($cache[$sender])) {
                $user = $cache[$sender];
            } else {
                $user = UserModel::getInstance()->getOne(array('id' => $row['sender']));
                $cache[$sender] = $user;
            }
            $row['user'] = $user;
            $data[] = $row;
        }

        return $data;
    }

    /**
     * @param $type
     * @param $user_id
     *
     * @return array|bool|int
     */
    private function getNotification($type, $user_id)
    {
        $sql = <<<EOT
            SELECT
                sender, receiver, content, is_read, notify_id, create_time, action
            FROM
                user_notify
            JOIN
                notification
            ON
                notification.`id` = user_notify.`notify_id`
            WHERE
                `type` = {$type}
            AND
                `receiver` = {$user_id}
            AND `is_read` = 0
EOT;

        return $this->db_engine->query($sql);
    }
}
