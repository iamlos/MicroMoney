<?php
/**
 * Created by PhpStorm.
 * User: shellvon
 * Date: 16/4/14
 * Time: 下午5:13.
 */

namespace Controller;

use MicroMan\MicroController;
use MicroMan\MicroUtility;
use Model\CostTypeModel;
use Model\RecordModel;
use Utility\ValidateHelper;
use Model\UserModel;

class IndexController extends MicroController
{
    /**
     * 主页.
     */
    public function index()
    {
        $user_obj = UserModel::getInstance();
        $record_obj = RecordModel::getInstance();
        $cost_type_obj = CostTypeModel::getInstance();
        $user_info = $user_obj->getOne(array('id' => $_SESSION['uid']));

        $table = $record_obj->getTableName();
        //数据库中记录的每个人的消费,每种类型的消费
        $each_user_cost = $record_obj->query("select uid, sum(cost) as cost from {$table} where is_deal=0 and is_delete = 0 group by uid");
        $each_type_cost = $record_obj->query("select type, sum(cost) as cost form {$table} where is_deal = 0 and is_delete = 0 group by type");
        $records = $record_obj->getAll();
        //总的消费记录
        $total_cost = array_sum(array_map(function ($data) {return $data['cost'];}, $each_user_cost));

        //现有用户列表.
        $user_lst = $user_obj->getAll(null, 'id, nickname', 'id');

        //初始化用户信息.
        $user_data = array();
        foreach ($user_lst as $uid => $user) {
            $user_data[$uid] = array(
                'percent' => 0,
                'cost' => 0,
                'benefit' => 0,
            );
        }

        //个人暂未结算金额比例计算,为了保证总和100%，此处最后一个的计算使用100-其他。
        for ($cnt = count($each_user_cost), $i = 0, $percent_cnt = 0; $i < $cnt; ++$i) {
            $uid = $each_user_cost[$i]['uid'];
            $percent = 100 * number_format($each_user_cost[$i]['cost'] / $total_cost, 4, '.', '');
            if ($i == $cnt - 1) {
                $percent = 100 - $percent_cnt;
            }
            $percent_cnt += $percent;
            $user_data[$uid] = array(
                'percent' => $percent,
                'cost' => number_format($each_user_cost[$i]['cost'], 2, '.', ''),
                'benefit' => 0,
            );
        }

        $type_map = $cost_type_obj->getAll();

        //各类型消费统计
        for ($cnt = count($each_type_cost), $i = 0, $percent_cnt = 0;$i < $cnt;++$i) {
            $percent = 100 * number_format($each_type_cost[$i]['cost'] / $total_cost, 4, '.', '');
            $who_arr = $type_map[$each_type_cost[$i]['type']];
            $avg_cost = $each_type_cost[$i]['cost'] / count($who_arr);
            foreach ($who_arr as $who) {
                $user_data[$who]['benefit'] += $avg_cost;
            }
            $each_type_cost[$i]['who'] = implode(',', $who_arr);
            if ($i == $cnt - 1) {
                $percent = 100 - $percent_cnt;
            }
            $percent_cnt += $percent;
            $each_type_cost[$i]['percent'] = $percent;
            $each_type_cost[$i]['cost'] = number_format($each_type_cost[$i]['cost'], 2, '.', '');
        }
        $current_uid = $user_info['id'];
        $current_user_cost = array(
            'cost' => number_format($user_data[$current_uid]['benefit'], 2, '.', ''),
            'settlement' => number_format($user_data[$current_uid]['cost'] - $user_data[$current_uid]['benefit'], 2, '.', ''),
        );
        $user_info = array_merge($user_info, $current_user_cost);
        $header = array('ID', '支付人', '支付金额', '支付时间', '消费消费人', '支付描述', '是否结算', '操作');
        $response = array(
            'user_lst' => $user_lst,
            'header' => $header,
            'user_info' => $user_info,
            'each_type_cost' => $each_type_cost,
            'user_data' => $user_data,
            'type_map' => $type_map,
            'records' => $records,
        );
        $this->displayTpl($response);
    }

    public function before()
    {
        parent::before(); // TODO: Change the autogenerated stub

        if (!isset($_SESSION['uid']) && strcasecmp($this->action_name, 'login') !== 0) {
            $this->redirectExit('/index/login');
        }
    }

    /**
     * 登录页面.
     */
    public function login()
    {
        $data = array(
            'title' => '钱呢去哪儿呢 | Login',
        );
        if ($this->isPost()) {
            $result = $this->doLogin();
            if ($result === true) {
                $this->redirectExit('/');
            }
            $data['error_msg'] = $result;
        }
        if (isset($_SESSION['uid'])) {
            $this->redirectExit('/');
        }
        $this->displayTpl($data, null, false);
    }

    /**
     * 登录操作.
     *
     * @return bool|string
     */
    private function doLogin()
    {
        $payloads = MicroUtility::getMultiPost(array('username', 'password'));
        $validator = new ValidateHelper();
        $rules = array(
            array('username,password', 'required'), // 必须且非空
            array('username,password', 'useRegex', 'reg' => '/[a-zA-Z0-9]{5,10}/'),
        );
        $result = $validator->addValidator(array())->isValid($payloads, $rules);
        if ($result !== true) {
            return $result[0];
        }
        $salt = 'MicroManWebApp';
        //TODO: 加密用户密码.
        #$payloads['password'] = md5($payloads['password'].$salt);
        $user_info = UserModel::getInstance()->getOne($payloads);
        if (empty($user_info)) {
            return '用户名或密码错误';
        }
        $_SESSION['uid'] = $user_info['id'];
        if (MicroUtility::getPost('remember') == 1) {
            // write cookie to auto login.
        }

        return true;
    }

    /**
     * 退出登录.仅POST才会退出.
     */
    public function logout()
    {
        if (!$this->isPost()) {
            $this->page404();
        } else {
            session_destroy();
            $_SESSION = array();
            $this->redirectExit('/index/login');
        }
    }

    /**
     * 搜索接口.
     */
    public function search()
    {
        $query = MicroUtility::getGet('q');
        $this->forbidden();
    }

    /**
     *
     */
    public function command()
    {
        if (!$this->isPost()) {
            $this->forbidden();
        }
        $action = MicroUtility::getPost('action');
        switch (strtolower($action)) {
            case 'add':
                $this->addCommand();
                break;
            case 'update':
                $this->updateCommand();
                break;
            case 'deal':
                $this->dealCommand();
                break;
            case 'dealbatch':
                $this->dealBatchCommand();
                break;
            default:
                $this->displayJson(array('error' => 0, 'msg' => 'invalid action'));
        }
    }

    /**
     * 添加记录.
     */
    private function addCommand()
    {
        //TODO: add validator and logs.
        $new_data = MicroUtility::getMultiPost(array('paid_username', 'cost', 'when', 'type', 'description'));
        $result = true;
        if (!$result) {
            $this->displayJson(array('error' => 1, 'msg' => '加入失败'));
        } else {
            $this->displayJson(array('error' => 0, 'msg' => '加入成功'));
        }
    }

    /**
     * 更新记录.
     */
    private function updateCommand()
    {
        $id = $_POST['id'];
        $new_data = MicroUtility::getMultiPost(array('paid_username', 'cost', 'when', 'type', 'description'));
        if (empty($id) || !is_numeric($id)) {
            die(json_encode(array('error' => 1, 'msg' => '参数不合法')));
        }
        $result = true;
        $this->displayJson(array('error' => $result ? 0 : 1, 'msg' => $result ? '成功' : '失败'));
    }

    /**
     * 单个处理.
     */
    private function dealCommand()
    {
        $id = MicroUtility::getPost('id');
        if (empty($id) || !is_numeric($id)) {
            die(json_encode(array('error' => 1, 'msg' => '参数不合法')));
        }
        $result = false;
        $this->displayJson(array('error' => $result ? 0 : 1, 'msg' => $result ? '成功' : '失败'));
    }

    /**
     * 批量处理.
     */
    private function dealBatchCommand()
    {
        $this->page404();
    }
}
