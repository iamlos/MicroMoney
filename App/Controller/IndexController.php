<?php
/**
 * Created by PhpStorm.
 * User: shellvon
 * Date: 16/4/14
 * Time: 下午5:13.
 */

namespace Controller;

use MicroMan\MicroController;
use MicroMan\MicroUtility;
use Utility\ValidateHelper;
use Model;

class IndexController extends MicroController
{
    public function index()
    {
        $fake_data = array(
            'user_info' => array('nickname' => $_SESSION['username'], 'id' => $_SESSION['uid'], 'job' => 'Web Developer', 'register_time' => '2016-4-15'),
            'current_user_cost' => array(
                'cost' => 100,
                'settlement' => 10.32,
            ),
            'names' => array(
                'shell-von',
                'Tom',
                'Cat',
                'Test'
            ),
            'user_data' => array(
                'shell-von' => array(
                    'cost' => 2,
                    'benifit' => 4,
                    'percent' => 40
                ),
            ),
            'each_type_cost' => array(
                '1' => array('cost' => 3,'percent' => 40,'who' => 'shell-von'),
                '3' => array('cost' => 30,'percent' => 40, 'who' => 'Tom'),
            ),
            'type_map' => array(1 => array('Tom'), 2 => array('shell-von', 'Tom'), 3 => array()),
            'date_range' => '2016-4-15 ~ 2016-4-20',
            'data' => array(

            ),
            'header_str' => '<th>'.join('</th><th>',
                    array('ID','支付人','支付金额','支付时间','消费消费人','支付描述','是否结算','操作')).'</th>',
        );

        $this->displayTpl($fake_data);
    }

    public function before()
    {
        parent::before(); // TODO: Change the autogenerated stub

        if (!isset($_SESSION['uid']) && strcasecmp($this->action_name, 'login') !== 0) {
            $this->redirectExit('/index/login');
        }
    }

    /**
     * 登录页面.
     */
    public function login()
    {
        $data = array(
            'title' => '钱呢去哪儿呢 | Login',
        );
        if ($this->isPost()) {
            $result = $this->doLogin();
            if ($result === true) {
                $this->redirectExit('/');
            }
            $data['error_msg'] = $result;
        }
        if (isset($_SESSION['uid'])) {
            $this->redirectExit('/');
        }
        $this->displayTpl($data, null, false);
    }

    /**
     * 登录操作.
     *
     * @return bool|string
     */
    private function doLogin()
    {
        $payloads = MicroUtility::getMultiPost(array('username', 'password'));
        $validator = new ValidateHelper();
        $rules = array(
            array('username,password', 'required'), // 必须且非空
            array('username,password', 'useRegex', 'reg' => '/[a-zA-Z0-9]{6,10}/'),
        );
        $result = $validator->addValidator(array())->isValid($payloads, $rules);
        if ($result !== true) {
            return $result[0];
        }

        $username = $payloads['username'];
        $password = $payloads['password'];

        $user_info = Model\UserModel::getInstance()->find($username, $password);
        if (empty($user_info)) {
            return '用户名或密码错误';
        }
        $_SESSION['uid'] = $user_info->id;
        $_SESSION['username'] = $user_info->username;
        if (MicroUtility::getPost('remember') == 1) {
            // write cookie to auto login.
        }

        return true;
    }

    /**
     * 退出登录.仅POST才会退出.
     */
    public function logout()
    {
        if (!$this->isPost()) {
            $this->page404();
        } else {
            session_destroy();
            $_SESSION = array();
            $this->redirectExit('/index/login');
        }
    }

    /**
     * 搜索接口.
     */
    public function search()
    {
        $query = MicroUtility::getGet('q');
        $this->forbidden();
    }

    /**
     *
     */
    public function command(){
        if(!$this->isPost()) {
            $this->forbidden();
        }
        $action = MicroUtility::getPost('action');
        switch(strtolower($action)) {
            case 'add':
                $this->addCommand();
                break;
            case 'update':
                $this->updateCommand();
                break;
            case 'deal':
                $this->dealCommand();
                break;
            case 'dealbatch':
                $this->dealBatchCommand();
                break;
            default:
                $this->displayJson(array('error' => 0, 'msg' => 'invalid action'));
        }
    }

    /**
     * 添加记录.
     */
    private function addCommand(){
        //TODO: add validator and logs.
        $new_data = MicroUtility::getMultiPost(array('paid_username', 'cost', 'when', 'type', 'description'));
        $result = true;
        if (!$result) {
            $this->displayJson(array('error'=>1, 'msg'=>'加入失败'));
        } else {
            $this->displayJson(array('error'=>0, 'msg'=>'加入成功'));
        }
    }

    /**
     * 更新记录.
     */
    private function updateCommand(){
        $id = $_POST['id'];
        $new_data = MicroUtility::getMultiPost(array('paid_username', 'cost', 'when', 'type', 'description'));
        if(empty($id) || !is_numeric($id)){
            die(json_encode(array('error'=>1, 'msg'=>'参数不合法')));
        }
        $result = true;
        $this->displayJson(array('error'=>$result?0 : 1, 'msg'=>$result?'成功':"失败"));

    }

    /**
     * 单个处理.
     */
    private function dealCommand(){
        $id = MicroUtility::getPost('id');
        if(empty($id) || !is_numeric($id)){
            die(json_encode(array('error'=>1, 'msg'=>'参数不合法')));
        }
        $result = false;
        $this->displayJson(array('error'=> $result ? 0 : 1, 'msg'=>$result?'成功':"失败"));
    }

    /**
     * 批量处理.
     */
    private function dealBatchCommand(){
        $this->page404();
    }
}
